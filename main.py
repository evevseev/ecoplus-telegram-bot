import busyfly_api
import os

import payment_gateways_api
from keyboards import getDaysKeyboard, getUnitKeyboard, getMainMenu

from utils import is_admin, get_admins

from classes import actions, action_cb, days_offsetting_cb
from datetime import datetime

import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InputFile
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

admins = get_admins()
logging.basicConfig(format='%(asctime)s %(levelname)s %(message)s', level=logging.INFO, datefmt='%Y-%m-%d %H:%M:%S')

bot = Bot(token=os.environ['BOT_API'], parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())


# dp.middleware.setup(LoggingMiddleware())

class actionStatus(StatesGroup):
    wait_confirmation = State()


async def sendConfirmation(data: dict, message: types.Message):
    msg = f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ {actions[data['action']].long_name}? || #{data['unit_name']}?"
    await actionStatus.wait_confirmation.set()

    state = dp.current_state()
    await state.update_data(
        {"unitid": data['unitid'],
         "action": data['action']}
    )

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).row("‚úÖ –î–∞!", "‚ùå –û—Ç–º–µ–Ω–∞")
    await message.answer(msg, reply_markup=keyboard)

    logging.info(
        f"{message.chat.id} ({message.chat.full_name}) - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ // {actions[data['action']].long_name} #{data['unit_name']}")


# TODO: change to chat id
async def sendUnitPhotos(message: types.Message, unit_name: str, orders_count: int):
    photo_bytes = busyfly_api.getLastUnitImages(unit_name, orders_count)

    if photo_bytes:
        photos = types.MediaGroup()
        for i in photo_bytes:
            photos.attach_photo(InputFile(i, '–°–∞–º–æ–∫–∞—Ç!'))
        await message.answer_media_group(photos)


# TODO: change to chat id and add func unit info
async def sendUnit(message: types.Message, unit_name: str):
    unit = busyfly_api.getUnitInfo(unit_name)
    if unit != "err":

        msg = f'üõ¥  <b>{unit["registration_number"]}</b> ({unit["status_connection"]})\n' \
              f'==   {unit["status_order_grid"]}'

        if unit["statusCombined"] == "on_charge":
            msg += " | –ù–∞ –∑–∞—Ä—è–¥–∫–µ ‚ö°Ô∏è (—Ç–µ—Ö. —Ä–µ–∂–∏–º)"
        elif unit["statusCombined"] == "at_warehouse":
            msg += " | –ù–∞ —Å–∫–ª–∞–¥–µ üè†"
        elif unit["statusCombined"] == "available":
            msg += " | –î–æ—Å—Ç—É–ø–µ–Ω üÜì"
        elif unit["statusCombined"] == "statusCombined":
            msg += " | –°–Ω—è—Ç —Å –¥–æ—Å—Ç—É–ø–∞ ‚ö†Ô∏è"
        elif unit["statusCombined"] == "stolen":
            msg += " | –£–∫—Ä–∞–¥–µ–Ω üë∫üë∫üë∫üë∫üë∫Ô∏è"

        msg += f'\n\nüîã  {unit["charge"]}%\n' \
               f'üì°  {unit["sats"]} —Å–ø—É—Ç–Ω–∏–∫–æ–≤\n\n' \
               f'<b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> {int((datetime.now() - datetime.fromtimestamp(unit["last_msg_time"])).total_seconds())} —Å–µ–∫\n'

        if unit["activeOrder"]:
            msg += f'\n{unit["activeOrder"]["end_user_price_plan_name"]}\n' \
                   f'{unit["activeOrder"]["end_user_login"]}\n' \
                   f'{unit["activeOrder"]["status"]}\n\n'

        if unit["last_order_finish_time"]:
            msg += f'<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:</b> {datetime.fromtimestamp(unit["last_order_finish_time"]).strftime("%Y-%m-%d %H:%M:%S")}'
        else:
            msg += f'<b>–ï—â–µ –Ω–µ –±—ã–ª–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞! üò¥</b>'

        await message.answer_location(unit["lat"], unit["lon"])
        await message.answer(msg, reply_markup=getUnitKeyboard(unit))

    else:
        await message.answer('<b>–°–∞–º–æ–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>')


@dp.callback_query_handler(action_cb.filter(), state='*')
async def process_callback_btn(query: types.CallbackQuery, callback_data: dict, state: FSMContext):
    if is_admin(query.message.chat.id):
        await state.reset_state()
        data = callback_data

        if data['action'] == "beep":
            await bot.answer_callback_query(query.id, text='–ó–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª –≤–∫–ª—é—á–µ–Ω!', show_alert=True)
            busyfly_api.sendUnitCommand(data['unitid'], 'beep')
            return
        elif data['action'] == 'photos':
            await query.message.answer("–ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...")
            await sendUnitPhotos(query.message, data['unit_name'], 5)
        elif data['action'] == 'last_commands':
            commands = busyfly_api.get_last_unit_commands(data['unitid'])
            commands_text = ""
            for command in commands:
                commands_text += f"{command['time']} <b>{command['description']}</b> ({command['user']})\n"
            await query.message.answer(commands_text)

        elif actions[data['action']].confirmation:
            await sendConfirmation(data, query.message)
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–æ–≤–∞–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        else:
            busyfly_api.sendUnitCommand(data['unitid'], data['action'])
            await query.message.answer(f"\n({actions[data['action']].long_name} // {data['unit_name']})",
                                       reply_markup=getMainMenu())

        await bot.answer_callback_query(query.id)


@dp.message_handler(state=actionStatus.wait_confirmation)
async def confirmation(message: types.Message, state: FSMContext):
    if is_admin(message.chat.id):
        if message.text == "‚úÖ –î–∞!":
            data = await state.get_data()
            busyfly_api.sendUnitCommand(data['unitid'], data['action'])
            await message.answer(f"\n({actions[data['action']].long_name} // {data['unitid']})",
                                 reply_markup=getMainMenu())
            await state.reset_state()

        elif message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await message.answer("–û—Ç–º–µ–Ω–∏–ª!", reply_markup=getMainMenu())
            await state.reset_state()

        else:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!")


@dp.message_handler(commands=['send_all'])
async def send_all(message: types.Message):
    if is_admin(message.chat.id):
        for i in admins:
            try:
                await bot.forward_message(i, message.chat.id, message.message_id)
            except Exception as e:
                await message.reply(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {i}\n–û—à–∏–±–∫–∞: {e}")


@dp.message_handler(text=['–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤'])
async def active_orders(message: types.Message):
    if is_admin(message.chat.id):
        rides, available_by_city = busyfly_api.get_active_rides()
        available = sum(available_by_city[i] for i in available_by_city)
        msg = ""
        for key, count in available_by_city.items():
            msg += f"<b>{key}:</b> {rides[key]}/{count}\n"
        await message.answer(
            f"üî∏ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</b>\n(–∞–∫—Ç–∏–≤–Ω—ã—Ö/–¥–æ—Å—Ç—É–ø–Ω—ã—Ö)\n\n{msg}\n<i><b>–í—ã—Å—Ç–∞–≤–ª–µ–Ω–æ —Å–∞–º–æ–∫–∞—Ç–æ–≤:</b> {available}</i>")
        logging.info(f"{message.chat.id} ({message.chat.username}) - —Å–º–æ—Ç—Ä–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã")


@dp.message_handler(text=['–í—ã—Ä—É—á–∫–∞ –∑–∞ –¥–µ–Ω—å'])
async def earnings(message: types.Message):
    if is_admin(message.chat.id) and not (message.chat.id == 827277891):
        r = busyfly_api.getEarnings(0)
        await message.answer(f"{r['date'].date()}\n\n"
                             f"–í—ã—Ä—É—á–∫–∞: {r['total']}\n"
                             f"–ó–∞–∫–∞–∑–æ–≤: {r['orders']}", reply_markup=getDaysKeyboard(0))


@dp.callback_query_handler(days_offsetting_cb.filter())
async def earnings_calendar(query: types.CallbackQuery, callback_data: dict):
    if is_admin(query.message.chat.id):
        days = int(callback_data['days'])
        action = callback_data['action']
        # TODO: if below
        if action == "before":
            days += 1
        elif action == "after":
            days -= 1
        elif action == "today":
            days = 0
        r = busyfly_api.getEarnings(days)
        if r:
            await bot.edit_message_text(f"{r['date'].date()}\n\n"
                                        f"–í—ã—Ä—É—á–∫–∞: {r['total']}\n"
                                        f"–ó–∞–∫–∞–∑–æ–≤: {r['orders']}",
                                        query.from_user.id,
                                        query.message.message_id,
                                        reply_markup=getDaysKeyboard(days))
        else:
            await query.message.answer("–í—ã –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü!")


@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    if is_admin(message.chat.id):
        await message.answer(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/transaction_info - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n")


@dp.message_handler(commands=['transaction_info'])
async def transaction_info(message: types.Message):
    if is_admin(message.chat.id):
        split = message.text.split()
        if len(split) == 2:
            try:
                await message.answer(payment_gateways_api.get_transaction_info(int(split[1])))
            except payment_gateways_api.TransactionNotFound as e:
                await message.answer(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        else:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /transaction_info (id)")


@dp.message_handler(commands=['give_money'])
async def give_money(message: types.Message):
    if message.chat.id in [62863141, 317914529]:
        split = message.text.split()
        if len(split) < 3 or not split[1].isdigit() or not split[2].isdigit():
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give_money (id) (amount) (reason)")
        else:
            try:
                busyfly_api.give_user_money(int(split[1]), int(split[2]))
                busyfly_api.send_user_notification(int(split[1]), f"–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {split[2]} —Ä—É–±.")
                await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{split[1]} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {split[2]} —Ä—É–±.")
                logging.info(f"{message.chat.id} ({message.chat.username}) - –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{split[1]} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {split[2]} —Ä—É–±.")
            except ValueError as e:
                await message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤.")



@dp.message_handler(text=['–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É'])
@dp.message_handler(commands=['start', 'id'])
async def send_welcome(message: types.Message):
    if not is_admin(message.chat.id):
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É'))
        await message.reply(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ!\n\n"
                            f"–í–∞—à ChatID: {message.chat.id}\n"
                            f"–°–æ–æ–±—â–∏—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!", reply_markup=kb)
    else:
        await message.reply(f"–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\nID: {message.chat.id}", reply_markup=getMainMenu())


@dp.message_handler()
async def unit_select(message: types.Message):
    if is_admin(message.chat.id):
        if message.text.isdigit():
            if 6 > len(message.text) >= 3:
                unit_name = "0" * (6 - len(message.text)) + message.text
            elif 10 > len(message.text) >= 6:
                unit_name = message.text
            else:
                await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–∞–º–æ–∫–∞—Ç–∞!")
                return
        elif "FAKE" in message.text:
            unit_name = message.text
        else:
            await message.reply("–ù–æ–º–µ—Ä —Å–∞–º–æ–∫–∞—Ç–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!")
            return

        await sendUnit(message, unit_name)
        logging.info(f"{message.chat.id} ({message.chat.username}) - –≤—ã–±—Ä–∞–ª —Å–∞–º–æ–∫–∞—Ç {message.text}")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
